# Initial Subtract Pipeline
#
#   Adapted from (and shamelesly copied from) Factor
#
# Pipeline to do the initial subtraction of all sources 
# - external version of the initsubtract step of Factor
# - will change the input-MSs (adds SUBTRACTED_DATA_HIGH and 
#   SUBTRACTED_DATA_ALL columns)
# - copies merged skymodels into folder with input data: "data_input_path"
# - requires combined predict-corrupt-subtract step in NDPPP 
#   (included in LOFAR since release 2.15)
# - in addition to the standard LOFAR software it requires wsclean
# - expects shared filesystem, that all nodes can reach all files!
#   (E.g. a single workstation or compute cluster with shared filesystem
#   doesn't work on multiple nodes on CEP-2 or CEP3.)

##### For this pipeline to work the data must have:
# - in the DATA column:
#   - the average amplitude scale set
#   - the average clock offsets removed
#   - the LOFAR beam towards the phase center corrected
# - in the CORRECTED_DATA column:
#   - the DATA calibrated with the gains in supplied the 
#     direction-indepndent parmDB
# - inside the measurement sets there has to be a parmDB with the
#   direction-indepndent, phase-only calibration values:
#   "Gain:0:0:*","Gain:1:1:*"
#
# The Pre-Facet-Cal pipelines will supply exactly this kind of data.

##### parameters you will need to adjust.
! data_input_path         = /mnt/scratch/data/raw
! data_input_pattern      = L*.pre-cal.ms
# name of the direction independent parmDBs inside the measurement sets
# needs to include the leading "/" to indicate that the parmDB is a subdirectory of the MS
! direction_indep_parmDBs = /instrument_directionindependent
! inspection_directory = /mnt/scratch/data/process

##### imaging parameters (Feel free to leave them untouched.)
#### specify  the image parameters here
# cellsize in degrees, 0.00208 deg is about 7.5 arcsec
! cellsize_highres_deg = 0.00208  
! cellsize_lowres_deg  = 0.00694
# size of the image is this value times the FWHM of the station beam
! fieldsize_highres    = 2.5
! fieldsize_lowres     = 6.5
# maximum uv-distance in lambda that will be used for imaging
# 7 klambda is machted to 7.5 arcsec cellsize
! maxlambda_highres    = 7000 
! maxlambda_lowres     = 2000
# How much padding shall we add during the imaging? 
! image_padding        = 1.4
# How much shall the y-axis be stretched or compressed?
# Used to get rectangular images. Use at your own risk!
! axis_stretch         = 1.

##### performance parameters
! max_imagers_per_node      =  1
! max_percent_mem_per_img   =  95
! max_cpus_per_img          =  15
! max_dppp_per_node         =  1
! max_dppp_threads          =  15
# set this to True if you want the pipeline run to continue if single bands fail
! error_tolerance           =  False

##### pathes to the scripts etc.
! wsclean_executable          = /usr/bin/wsclean
! do_magic_script             = /home/ubuntu/prefactor/bin/InitSubtract_sort_and_compute.py
! merge_skymodels_script      = /home/ubuntu/prefactor/bin/merge_skymodels.py
! make_clean_mask_script      = /home/ubuntu/prefactor/bin/make_clean_mask.py
! fits_to_casa_script         = /home/ubuntu/prefactor/bin/convert_fits_image_to_casa.py
! realimag_script             = /home/ubuntu/prefactor/bin/parmdb_gain_to_real-imag.py
! plot_subtract_images_script = /home/ubuntu/prefactor/bin/plot_subtract_images.py
! casapy2bbs                  = /opt/LofIm/bin/casapy2bbs.py
! makesourcedb                = /opt/LofIm/bin/makesourcedb

##### BBS parsets
! subtract_high_parset        = /home/ubuntu/astrocompute/pipeline/generic_pipeline/parsets/subtract_high.parset
! subtract_low_parset         = /home/ubuntu/astrocompute/pipeline/generic_pipeline/parsets/subtract_low.parset


# the Steps in this pipeline
pipeline.steps = [create_ms_map, combine_mapfile, do_magic, do_magic_maps, create_parmdb_map, wsclean_high1, mask_high, mk_inspect_dir, copy_mask, wsclean_high2, move_high2, fits_to_image_high, casa_to_bbs_high, make_sourcedb_high, expand_sourcedb_high, parmdbs_to_realimag, subtract_high, correct_high, regroup_map, wsclean_low1, mask_low, wsclean_low2, move_low2, fits_to_image_low, casa_to_bbs_low, make_sourcedb_low, expand_sourcedb_low, subtract_low, merge, copy_skymodels, plot_im_high, plot_im_low, createmap_plots, move_plots]

# create a mapfile with all MSs, length = nfiles
create_ms_map.control.kind                      =   plugin
create_ms_map.control.type                      =   createMapfile
create_ms_map.control.method                    =   mapfile_from_folder
create_ms_map.control.mapfile_dir               =   input.output.mapfile_dir
create_ms_map.control.filename                  =   create_ms_map.mapfile
create_ms_map.control.folder                    =   {{ data_input_path }}
create_ms_map.control.pattern                   =   {{ data_input_pattern }}

# generate a mapfile with all files in a single entry, length = 1
combine_mapfile.control.kind                    =  plugin
combine_mapfile.control.type                    =  createMapfile
combine_mapfile.control.method                  =  mapfile_all_to_one
combine_mapfile.control.mapfile_in              =  create_ms_map.output.mapfile
combine_mapfile.control.mapfile_dir             =  input.output.mapfile_dir  
combine_mapfile.control.filename                =  combine_mapfile.mapfile

# compute frequency groupings, image sizes, averaging values, etc., len = different
do_magic.control.type                           =  pythonplugin                
do_magic.control.executable                     =  {{ do_magic_script }}
do_magic.argument.flags                         =  [combine_mapfile.output.mapfile]
do_magic.argument.outmapname                    =  do_magic.datamap
do_magic.argument.mapfile_dir                   =  input.output.mapfile_dir
do_magic.argument.cellsize_highres_deg          =  {{ cellsize_highres_deg }}
do_magic.argument.cellsize_lowres_deg           =  {{ cellsize_lowres_deg }}
do_magic.argument.fieldsize_highres             =  {{ fieldsize_highres }}
do_magic.argument.fieldsize_lowres              =  {{ fieldsize_lowres }}
do_magic.argument.image_padding                 =  {{ image_padding }}
do_magic.argument.y_axis_stretch                =  {{ axis_stretch }}

# convert the output of do_magic into usable mapfiles,len = 1 / different 
do_magic_maps.control.kind                      =  plugin
do_magic_maps.control.type                      =  mapfilenamesFromMapfiles
do_magic_maps.control.mapfile_groupmap          =  do_magic.output.groupmap.mapfile
do_magic_maps.control.mapfile_single_map        =  do_magic.output.single_mapfile.mapfile
do_magic_maps.control.mapfile_high_size_map     =  do_magic.output.high_size_mapfile.mapfile
do_magic_maps.control.mapfile_low_size_map      =  do_magic.output.low_size_mapfile.mapfile
do_magic_maps.control.mapfile_freqstep_map      =  do_magic.output.freqstep.mapfile
do_magic_maps.control.mapfile_timestep_map      =  do_magic.output.timestep.mapfile
do_magic_maps.control.mapfile_high_padsize_map  =  do_magic.output.high_padsize_mapfile.mapfile
do_magic_maps.control.mapfile_low_padsize_map   =  do_magic.output.low_padsize_mapfile.mapfile

# create a mapfile with the direction independent parmDBs, length = nfiles
create_parmdb_map.control.kind                  =  plugin
create_parmdb_map.control.type                  =  createMapfile
create_parmdb_map.control.method                =  add_suffix_to_file
create_parmdb_map.control.mapfile_in            =  do_magic_maps.output.single_map
create_parmdb_map.control.add_suffix_to_file    =  {{ direction_indep_parmDBs }}
create_parmdb_map.control.mapfile_dir           =  input.output.mapfile_dir  
create_parmdb_map.control.filename              =  dir_indep_instrument_parmdbs.mapfile

# first high-res imaging, length = nbands
wsclean_high1.control.kind                      =   recipe
wsclean_high1.control.type                      =   executable_args
wsclean_high1.control.executable                =   {{ wsclean_executable }}
wsclean_high1.control.outputsuffixes            =   [-image.fits,-model.fits]
wsclean_high1.control.outputkey                 =   name
wsclean_high1.control.args_format               =   wsclean
wsclean_high1.control.max_per_node              =   {{ max_imagers_per_node }}
wsclean_high1.control.error_tolerance           =   {{ error_tolerance }}
wsclean_high1.control.mapfiles_in               =   [do_magic_maps.output.groupmap,do_magic_maps.output.high_padsize_map,do_magic_maps.output.high_size_map]
wsclean_high1.control.inputkeys                 =   [msfile,paddedsize,outputsize]
wsclean_high1.argument.flags                    =   [-no-update-model-required,-reorder,-fitbeam,msfile]
wsclean_high1.argument.size                     =   paddedsize
wsclean_high1.argument.trim                     =   outputsize
wsclean_high1.argument.niter                    =   40000
wsclean_high1.argument.threshold                =   0.0
wsclean_high1.argument.pol                      =   I
wsclean_high1.argument.weight                   =   briggs 0.0
wsclean_high1.argument.mgain                    =   0.65
wsclean_high1.argument.minuv-l                  =   80
wsclean_high1.argument.maxuv-l                  =   {{ maxlambda_highres }}
wsclean_high1.argument.scale                    =   {{ cellsize_highres_deg }}
wsclean_high1.argument.mem                      =   {{ max_percent_mem_per_img }}
wsclean_high1.argument.j                        =   {{ max_cpus_per_img }}
wsclean_high1.argument.weighting-rank-filter    =   3

# make masks for the high-res images, length = nbands
mask_high.control.type                          =   pythonplugin
mask_high.control.executable                    =   {{ make_clean_mask_script }}
mask_high.control.max_per_node                  =   {{ max_imagers_per_node }}
mask_high.control.error_tolerance               =   {{ error_tolerance }}
mask_high.control.mapfile_in                    =   wsclean_high1.output.wsclean_high1-image.fits.mapfile
mask_high.control.inputkey                      =   imagefile
mask_high.control.outputkey                     =   maskfile
mask_high.argument.flags                        =   [imagefile,maskfile]
mask_high.argument.threshisl                    =   3.0
mask_high.argument.threshpix                    =   5.0
mask_high.argument.atrous_do                    =   True
mask_high.argument.rmsbox                       =   (60,20)
mask_high.argument.adaptive_rmsbox              =   True
mask_high.argument.img_format                   =   fits
mask_high.argument.atrous_jmax                  =   3
mask_high.argument.trim_by                      =   0.1

# create the inspection_directory if needed
mk_inspect_dir.control.kind                     =  plugin
mk_inspect_dir.control.type                     =  makeDirectory
mk_inspect_dir.control.directory                =  {{ inspection_directory }}

# copy the mask images to where we want them
copy_mask.control.kind                          =  recipe
copy_mask.control.type                          =  executable_args
copy_mask.control.executable                    =  /bin/cp
copy_mask.control.max_per_node                  =  10      #not much use to have too many of those
copy_mask.control.mapfile_in                    =  mask_high.output.mapfile
copy_mask.control.inputkey                      =  source
copy_mask.control.arguments                     =  [source,{{ inspection_directory }}]

# second high-res imaging, length = nbands
wsclean_high2.control.kind                      =   recipe
wsclean_high2.control.type                      =   executable_args
wsclean_high2.control.executable                =   {{ wsclean_executable }}
wsclean_high2.control.outputsuffixes            =   [-image.fits,-model.fits]
wsclean_high2.control.outputkey                 =   name
wsclean_high2.control.args_format               =   wsclean
wsclean_high2.control.max_per_node              =   {{ max_imagers_per_node }}
wsclean_high2.control.error_tolerance           =   {{ error_tolerance }}
wsclean_high2.control.mapfiles_in               =   [do_magic_maps.output.groupmap,mask_high.output.mapfile,do_magic_maps.output.high_padsize_map,do_magic_maps.output.high_size_map]
wsclean_high2.control.inputkeys                 =   [msfile,fitsmask,paddedsize,outputsize]
wsclean_high2.argument.flags                    =   [-update-model-required,-reorder,-fitbeam,msfile]
wsclean_high2.argument.fitsmask                 =   fitsmask
wsclean_high2.argument.size                     =   paddedsize
wsclean_high2.argument.trim                     =   outputsize
wsclean_high2.argument.niter                    =   40000
wsclean_high2.argument.threshold                =   mask_high.output.threshold_5sig.mapfile
wsclean_high2.argument.pol                      =   I
wsclean_high2.argument.weight                   =   briggs 0.0
wsclean_high2.argument.mgain                    =   0.65
wsclean_high2.argument.minuv-l                  =   80
wsclean_high2.argument.maxuv-l                  =   {{ maxlambda_highres }}
wsclean_high2.argument.scale                    =   {{ cellsize_highres_deg }}
wsclean_high2.argument.mem                      =   {{ max_percent_mem_per_img }}
wsclean_high2.argument.j                        =   {{ max_cpus_per_img }}
wsclean_high2.argument.weighting-rank-filter    =   3

# move the high2 images to where we want them
move_high2.control.kind                         =  recipe
move_high2.control.type                         =  executable_args
move_high2.control.executable                   =  /bin/mv
move_high2.control.max_per_node                 =  10      #not much use to have too many of those
move_high2.control.mapfile_in                   =  wsclean_high2.output.wsclean_high2-image.fits.mapfile
move_high2.control.inputkey                     =  source
move_high2.control.arguments                    =  [source,{{ inspection_directory }}]

# convert high-res images to casa images, length = nbands
fits_to_image_high.control.type                 =   pythonplugin
fits_to_image_high.control.executable           =   {{ fits_to_casa_script }}
fits_to_image_high.control.error_tolerance      =   {{ error_tolerance }}
fits_to_image_high.control.mapfile_in           =   wsclean_high2.output.wsclean_high2-model.fits.mapfile
fits_to_image_high.control.inputkey             =   fitsfile
fits_to_image_high.control.outputkey            =   imagefile
fits_to_image_high.argument.flags               =   [fitsfile,imagefile]
fits_to_image_high.argument.force_stokes_i      =   True

# convert high-res casa images to skymodel files, length = nbands
casa_to_bbs_high.control.kind                   =   recipe
casa_to_bbs_high.control.type                   =   executable_args
casa_to_bbs_high.control.executable             =   {{ casapy2bbs }}
casa_to_bbs_high.control.error_tolerance        =   {{ error_tolerance }}
casa_to_bbs_high.control.mapfile_in             =   fits_to_image_high.output.mapfile
casa_to_bbs_high.control.inputkey               =   inputmodel
casa_to_bbs_high.control.outputkey              =   outfile
casa_to_bbs_high.control.arguments              =   [-n,inputmodel,outfile]

# make sourcedbs from the high-res skymodels, length = nbands
# can use outtype=blob because we'll use NDPPP
# also NDPPP doesn't wait for exclusive lock on blob-type sourceDBs
make_sourcedb_high.control.kind                 =   recipe
make_sourcedb_high.control.type                 =   executable_args
make_sourcedb_high.control.executable           =   {{ makesourcedb }}
make_sourcedb_high.control.error_tolerance      =   {{ error_tolerance }}
make_sourcedb_high.control.args_format          =   lofar
make_sourcedb_high.control.outputkey            =   out
make_sourcedb_high.control.mapfile_in           =   casa_to_bbs_high.output.mapfile
make_sourcedb_high.control.inputkey             =   in
make_sourcedb_high.argument.format              =   <
make_sourcedb_high.argument.outtype             =   blob

# expand the sourcedb mapfile so that there is one entry for every file, length = nfiles
expand_sourcedb_high.control.kind               =   plugin
expand_sourcedb_high.control.type               =   mapfileSingleToGroup
expand_sourcedb_high.control.mapfile_in         =   make_sourcedb_high.output.mapfile
expand_sourcedb_high.control.mapfile_groups     =   do_magic_maps.output.groupmap
expand_sourcedb_high.control.mapfile_dir        =   input.output.mapfile_dir
expand_sourcedb_high.control.filename           =   expand_sourcedb_high.datamap

# convert the parmdbs to real/imag values, length = nfiles
parmdbs_to_realimag.control.type                =   pythonplugin
parmdbs_to_realimag.control.executable          =   {{ realimag_script }}
parmdbs_to_realimag.control.error_tolerance     =   {{ error_tolerance }}
parmdbs_to_realimag.control.mapfiles_in         =   [do_magic_maps.output.single_map,create_parmdb_map.output.mapfile]
parmdbs_to_realimag.control.inputkeys           =   [dummy, pdb_in]
parmdbs_to_realimag.control.outputkey           =   pdb_out
parmdbs_to_realimag.argument.flags              =   [pdb_in, pdb_out]

# Predict, corrupt, and subtract the high-resolution model, length = nfiles
# The low-resolution model will be subtracted from the 
# output column (SUBTRACTED_DATA_HIGH) later
#subtract_high.control.type                      =   dppp
#subtract_high.control.mapfiles_in               =   [do_magic_maps.output.single_map,expand_sourcedb_high.output.mapfile,parmdbs_to_realimag.output.mapfile]
#subtract_high.control.inputkeys                 =   [msin,sourcedb,parmdb]
#subtract_high.control.inplace                   =   True
#subtract_high.control.max_per_node              =   {{ max_dppp_per_node }}
#subtract_high.argument.numthreads               =   {{ max_dppp_threads }}
#subtract_high.control.error_tolerance           =   {{ error_tolerance }}
#subtract_high.argument.msin.datacolumn          =   DATA
#subtract_high.argument.msout                    =   .
#subtract_high.argument.msout.datacolumn         =   SUBTRACTED_DATA_HIGH
#subtract_high.argument.steps                    =   [subtract]
#subtract_high.argument.subtract.type            =   predict
#subtract_high.argument.subtract.sourcedb        =   sourcedb
#subtract_high.argument.subtract.operation       =   subtract
#subtract_high.argument.subtract.applycal.parmdb =   parmdb

subtract_high.control.type                            =  python-calibrate-stand-alone  
subtract_high.control.max_per_node                    =  1  
subtract_high.control.error_tolerance                 =  {{ error_tolerance }}
subtract_high.control.mapfiles_in                     =  [do_magic_maps.output.single_map, parmdbs_to_realimag.output.mapfile, casa_to_bbs_high.output.mapfile]
subtract_high.control.inputkeys                       =  [msin,sourcedb,parmdb]
subtract_high.control.inplace                         =  True
subtract_high.argument.force                          =  True 
subtract_high.argument.observation                    =  msin
subtract_high.argument.parmdb-name                    =  parmdb
subtract_high.argument.parset                         =  {{ subtract_high_parset }}  
subtract_high.argument.catalog                        =  sourcedb


# Correct the SUBTRACTED_DATA_HIGH column and average to prepare for imaging, length = nfiles
correct_high.control.type                       =   dppp
correct_high.control.mapfiles_in                =   [do_magic_maps.output.single_map,parmdbs_to_realimag.output.mapfile,do_magic_maps.output.freqstep_map,do_magic_maps.output.timestep_map]
correct_high.control.inputkeys                  =   [msin,parmdb,avg.freqstep,avg.timestep]
correct_high.control.max_per_node               =   {{ max_dppp_per_node }}
correct_high.argument.numthreads                =   {{ max_dppp_threads }}
correct_high.control.error_tolerance            =   {{ error_tolerance }}
correct_high.argument.msin.datacolumn           =   SUBTRACTED_DATA_HIGH
correct_high.argument.msout.overwrite           =   True
correct_high.argument.msout.writefullresflag    =   False
correct_high.argument.steps                     =   [correct,avg]
correct_high.argument.correct.type              =   applycal
correct_high.argument.correct.parmdb            =   parmdb
correct_high.argument.correct.invert            =   True
correct_high.argument.avg.type                  =   squash

# re-group mapfile to have one group per band, length = nbands
regroup_map.control.kind                        =   plugin
regroup_map.control.type                        =   reGroupMapfile
regroup_map.control.mapfile_in                  =   correct_high.output.mapfile
regroup_map.control.mapfile_groups              =   do_magic_maps.output.groupmap
regroup_map.control.mapfile_dir                 =   input.output.mapfile_dir
regroup_map.control.filename                    =   re_grouped.datamap

# first low-res imaging, length = nbands
wsclean_low1.control.kind                       =   recipe
wsclean_low1.control.type                       =   executable_args
wsclean_low1.control.executable                 =   {{ wsclean_executable }}
wsclean_low1.control.outputsuffixes             =   [-image.fits,-model.fits]
wsclean_low1.control.outputkey                  =   name
wsclean_low1.control.args_format                =   wsclean
wsclean_low1.control.max_per_node               =   {{ max_imagers_per_node }}
wsclean_low1.control.error_tolerance            =   {{ error_tolerance }}
wsclean_low1.control.mapfiles_in                =   [regroup_map.output.mapfile,do_magic_maps.output.low_padsize_map,do_magic_maps.output.low_size_map]
wsclean_low1.control.inputkeys                  =   [msfile,paddedsize,outputsize]
wsclean_low1.argument.flags                     =   [-no-update-model-required,-reorder,-fitbeam,msfile]
wsclean_low1.argument.size                      =   paddedsize
wsclean_low1.argument.trim                      =   outputsize
wsclean_low1.argument.niter                     =   20000
wsclean_low1.argument.threshold                 =   0.0
wsclean_low1.argument.pol                       =   I
wsclean_low1.argument.weight                    =   briggs 0.0
wsclean_low1.argument.mgain                     =   0.65
wsclean_low1.argument.minuv-l                   =   80
wsclean_low1.argument.maxuv-l                   =   {{ maxlambda_lowres }}
wsclean_low1.argument.scale                     =   {{ cellsize_lowres_deg }}
wsclean_low1.argument.mem                       =   {{ max_percent_mem_per_img }}
wsclean_low1.argument.j                         =   {{ max_cpus_per_img }}
wsclean_low1.argument.weighting-rank-filter     =   3

# make masks for the low-res images, length = nbands
mask_low.control.type                           =   pythonplugin
mask_low.control.executable                     =   {{ make_clean_mask_script }}
mask_low.control.max_per_node                   =   {{ max_imagers_per_node }}
mask_low.control.error_tolerance                =   {{ error_tolerance }}
mask_low.control.mapfile_in                     =   wsclean_low1.output.wsclean_low1-image.fits.mapfile
mask_low.control.inputkey                       =   imagefile
mask_low.control.outputkey                      =   maskfile
mask_low.argument.flags                         =   [imagefile,maskfile]
mask_low.argument.threshisl                     =   4
mask_low.argument.threshpix                     =   5
mask_low.argument.atrous_do                     =   True
mask_low.argument.rmsbox                        =   (60,20)
mask_low.argument.adaptive_rmsbox               =   True
mask_low.argument.img_format                    =   fits
mask_low.argument.atrous_jmax                   =   3
mask_low.argument.trim_by                       =   0.1

# second low-res imaging, length = nbands
wsclean_low2.control.kind                       =   recipe
wsclean_low2.control.type                       =   executable_args
wsclean_low2.control.executable                 =   {{ wsclean_executable }}
wsclean_low2.control.outputsuffixes             =   [-image.fits,-model.fits]
wsclean_low2.control.outputkey                  =   name
wsclean_low2.control.args_format                =   wsclean
wsclean_low2.control.max_per_node               =   {{ max_imagers_per_node }}
wsclean_low2.control.error_tolerance            =   {{ error_tolerance }}
wsclean_low2.control.mapfiles_in                =   [regroup_map.output.mapfile,mask_low.output.mapfile,do_magic_maps.output.low_padsize_map,do_magic_maps.output.low_size_map]
wsclean_low2.control.inputkeys                  =   [msfile,fitsmask,paddedsize,outputsize]
wsclean_low2.argument.flags                     =   [-no-update-model-required,-reorder,-fitbeam,msfile]
wsclean_low2.argument.fitsmask                  =   fitsmask
wsclean_low2.argument.size                      =   paddedsize
wsclean_low2.argument.trim                      =   outputsize
wsclean_low2.argument.niter                     =   20000
wsclean_low2.argument.threshold                 =   mask_low.output.threshold_5sig.mapfile
wsclean_low2.argument.pol                       =   I
wsclean_low2.argument.weight                    =   briggs 0.0
wsclean_low2.argument.mgain                     =   0.65
wsclean_low2.argument.minuv-l                   =   80
wsclean_low2.argument.maxuv-l                   =   {{ maxlambda_lowres }}
wsclean_low2.argument.scale                     =   {{ cellsize_lowres_deg }}
wsclean_low2.argument.mem                       =   {{ max_percent_mem_per_img }}
wsclean_low2.argument.j                         =   {{ max_cpus_per_img }}
wsclean_low2.argument.weighting-rank-filter     =   3

# move the low2 images to where we want them
move_low2.control.kind                          =  recipe
move_low2.control.type                          =  executable_args
move_low2.control.executable                    =  /bin/mv
move_low2.control.max_per_node                  =  10      #not much use to have too many of those
move_low2.control.mapfile_in                    =  wsclean_low2.output.wsclean_low2-image.fits.mapfile
move_low2.control.inputkey                      =  source
move_low2.control.arguments                     =  [source,{{ inspection_directory }}]

# convert low-res images to casa images, length = nbands
fits_to_image_low.control.type                  =   pythonplugin
fits_to_image_low.control.executable            =   {{ fits_to_casa_script }}
fits_to_image_low.control.error_tolerance       =   {{ error_tolerance }}
fits_to_image_low.control.mapfile_in            =   wsclean_low2.output.wsclean_low2-model.fits.mapfile
fits_to_image_low.control.inputkey              =   fitsfile
fits_to_image_low.control.outputkey             =   imagefile
fits_to_image_low.argument.flags                =   [fitsfile,imagefile]
fits_to_image_low.argument.force_stokes_i       =   True

# convert low-res casa images to skymodel files, length = nbands
casa_to_bbs_low.control.kind                    =   recipe
casa_to_bbs_low.control.type                    =   executable_args
casa_to_bbs_low.control.executable              =   {{ casapy2bbs }}
casa_to_bbs_low.control.error_tolerance         =   {{ error_tolerance }}
casa_to_bbs_low.control.mapfile_in              =   fits_to_image_low.output.mapfile
casa_to_bbs_low.control.inputkey                =   inputmodel
casa_to_bbs_low.control.outputkey               =   outfile
casa_to_bbs_low.control.arguments               =   [-n,inputmodel,outfile]

# make sourcedbs from the low-res skymodels, length = nbands
# outtype = blob for the same reasons as for sourcedb_high 
make_sourcedb_low.control.kind                  =   recipe
make_sourcedb_low.control.type                  =   executable_args
make_sourcedb_low.control.executable            =   {{ makesourcedb }}
make_sourcedb_low.control.error_tolerance       =   {{ error_tolerance }}
make_sourcedb_low.control.args_format           =   lofar
make_sourcedb_low.control.outputkey             =   out
make_sourcedb_low.control.mapfile_in            =   casa_to_bbs_low.output.mapfile
make_sourcedb_low.control.inputkey              =   in
make_sourcedb_low.argument.format               =   <
make_sourcedb_low.argument.outtype              =   blob

# expand the sourcedb mapfile so that there is one entry for every file, length = nfiles
expand_sourcedb_low.control.kind                =   plugin
expand_sourcedb_low.control.type                =   mapfileSingleToGroup
expand_sourcedb_low.control.mapfile_in          =   make_sourcedb_low.output.mapfile
expand_sourcedb_low.control.mapfile_groups      =   do_magic_maps.output.groupmap
expand_sourcedb_low.control.mapfile_dir         =   input.output.mapfile_dir
expand_sourcedb_low.control.filename            =   expand_sourcedb_low.datamap

# Predict, corrupt, and subtract the low-resolution model, length = nfiles
#subtract_low.control.type                       =   dppp
#subtract_low.control.mapfiles_in                =   [do_magic_maps.output.single_map,expand_sourcedb_low.output.mapfile,parmdbs_to_realimag.output.mapfile]
#subtract_low.control.inputkeys                  =   [msin,sourcedb,parmdb]
#subtract_low.control.inplace                    =   True
#subtract_low.control.max_per_node               =   {{ max_dppp_per_node }}
#subtract_low.argument.numthreads                =   {{ max_dppp_threads }}
#subtract_low.control.error_tolerance            =   {{ error_tolerance }}
#subtract_low.argument.msin.datacolumn           =   SUBTRACTED_DATA_HIGH
#subtract_low.argument.msout                     =   .
#subtract_low.argument.msout.datacolumn          =   SUBTRACTED_DATA_ALL
#subtract_low.argument.steps                     =   [subtract]
#subtract_low.argument.subtract.type             =   predict
#subtract_low.argument.subtract.sourcedb         =   sourcedb
#subtract_low.argument.subtract.operation        =   subtract
#subtract_low.argument.subtract.applycal.parmdb  =   parmdb

subtract_low.control.type                            =  python-calibrate-stand-alone  
subtract_low.control.max_per_node                    =  1  # feel free to adjust this to match your system  
subtract_low.control.error_tolerance                 =  {{ error_tolerance }}
subtract_low.control.mapfiles_in                     =  [do_magic_maps.output.single_map, parmdbs_to_realimag.output.mapfile, casa_to_bbs_low.output.mapfile]
subtract_low.control.inputkeys                       =  [msin,sourcedb,parmdb]
subtract_low.control.inplace                         =  True
subtract_low.argument.force                          =  True 
subtract_low.argument.observation                    =  msin
subtract_low.argument.parmdb-name                    =  parmdb
subtract_low.argument.parset                         =  {{ subtract_low_parset }}  
subtract_low.argument.catalog                        =  sourcedb

# merge the high-res and low-res skymodels, length = nbands
merge.control.type                              =   pythonplugin
merge.control.executable                        =   {{ merge_skymodels_script }}
merge.control.error_tolerance                   =   {{ error_tolerance }}
merge.control.mapfiles_in                       =   [casa_to_bbs_low.output.mapfile,casa_to_bbs_high.output.mapfile]
merge.control.inputkeys                         =   [modellow,modelhigh]
merge.control.outputkey                         =   modelmerged
merge.argument.flags                            =   [modellow,modelhigh,modelmerged]

# copy the merged skymodels to the directory with the input data, length = nbands
copy_skymodels.control.kind                     =  recipe
copy_skymodels.control.type                     =  executable_args
copy_skymodels.control.executable               =  /bin/cp
copy_skymodels.control.mapfile_in               =  merge.output.mapfile
copy_skymodels.control.inputkey                 =  source
copy_skymodels.control.arguments                =  [source,{{ data_input_path }}]

# plot the high-res image and mask, length = nbands
plot_im_high.control.type                       =   pythonplugin
plot_im_high.control.executable                 =   {{ plot_subtract_images_script }}
plot_im_high.control.error_tolerance            =   {{ error_tolerance }}
plot_im_high.control.mapfiles_in                =   [wsclean_high2.output.wsclean_high2-image.fits.mapfile,mask_high.output.mapfile]
plot_im_high.control.inputkeys                  =   [imhigh,maskhigh]
plot_im_high.control.outputkey                  =   imname
plot_im_high.argument.flags                     =   [imhigh,maskhigh,imname]

# plot the low-res image and mask, length = nbands
plot_im_low.control.type                        =   pythonplugin
plot_im_low.control.executable                  =   {{ plot_subtract_images_script }}
plot_im_low.control.error_tolerance             =   {{ error_tolerance }}
plot_im_low.control.mapfiles_in                 =   [wsclean_low2.output.wsclean_low2-image.fits.mapfile,mask_low.output.mapfile]
plot_im_low.control.inputkeys                   =   [imlow,masklow]
plot_im_low.control.outputkey                   =   imname
plot_im_low.argument.flags                      =   [imlow,masklow,imname]

# create a map with the generated plots 
createmap_plots.control.kind                    =   plugin
createmap_plots.control.type                    =   createMapfile
createmap_plots.control.method                  =   mapfile_from_folder
createmap_plots.control.mapfile_dir             =   input.output.mapfile_dir
createmap_plots.control.filename                =   diagnostic_plots.mapfile
createmap_plots.control.folder                  =   input.output.working_directory/input.output.job_name
createmap_plots.control.pattern                 =   *.png

# move the plots to the directory with the input data, length = 2x nbands
move_plots.control.kind                         =  recipe
move_plots.control.type                         =  executable_args
move_plots.control.executable                   =  /bin/mv
move_plots.control.mapfile_in                   =  createmap_plots.output.mapfile
move_plots.control.inputkey                     =  source
move_plots.control.arguments                    =  [source,{{ inspection_directory }}]
