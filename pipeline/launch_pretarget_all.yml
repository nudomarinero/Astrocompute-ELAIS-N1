---
- name: Setup spot calibration instance
  hosts: localhost
  vars:
    count: 9
    startindex: 0
    instance_type: "r3_2xlarge"
    calibration_type: "pretarget"
  vars_files:
  - "{{ instance_type|default('m4_4xlarge') }}_{{ calibration_type|default('pretarget') }}.yml"
  tasks:  
  - name: Launch spot instances
    ec2:
      image: ami-bf3507d5
      region: us-east-1
      instance_type: "{{ instance_type_v }}"
      spot_price: "{{ spot_price_v }}"
      key_name: "{{ key_name }}"
      group: [ska]
      instance_tags: 
        type: "{{ calibration_type }}"
        env: production
      wait: yes
      monitoring: yes
      exact_count: "{{ count }}"
      count_tag: { type: "{{ calibration_type }}" }
    register: ec2
    tags:
    - launch
  
  - name: add the instance to the inventory
    add_host: name={{ item.public_ip }} groups=cal,pretarget,production
    with_items: '{{ec2.tagged_instances}}'
    when: item.public_ip is defined
    tags:
    - launch
  
  - name: create identifier sequence for tagging
    debug: msg="{{ item }}"
    with_sequence: start="{{ startindex }}" count="{{ count }}" format=%d
    no_log: true # mute output
    register: sequence
    tags:
      - tag
      - mount_disk
      
  - name: tag instances
    no_log: true
    ec2_tag:
      resource: "{{ item.0.id }}"
      region: us-east-1
      tags:
        Name: "{{ calibration_type }}{{ item.1.msg }}"
        iname: "{{ calibration_type }}{{ item.1.msg }}"
        band: "{{ item.1.msg }}"
    with_together:
      - '{{ec2.tagged_instances}}'
      - '{{sequence.results}}'
    tags:
      - tag
  
  - name: update dns records
    route53:
      command: create
      zone: "lofarcloud.uk"
      record: "{{ calibration_type }}{{ item.1.msg }}.lofarcloud.uk"
      type: A
      ttl: 300
      value: "{{ item.0.public_ip }}"
      overwrite: True
    with_together:
      - '{{ec2.tagged_instances}}'
      - '{{sequence.results}}'
    tags:
      - launch
      - dns

  - name: wait for ssh server to be running
    wait_for: host={{ item.public_dns_name }} port=22 search_regex=OpenSSH
    with_items: '{{ec2.tagged_instances}}'
    when: item.public_dns_name is defined   
    tags:
      - mount_disk
  
  - name: Attach data disk
    ec2_vol:
      region: us-east-1
      instance: "{{ item.0.id }}"
      volume_size: "{{ volume_size }}"
      volume_type: "{{ volume_type }}"
      name: "{{ calibration_type }}{{ item.1.msg }}"
      device_name: /dev/xvdf
    with_together:
      - '{{ec2.tagged_instances}}'
      - '{{sequence.results}}'
    tags:
      - mount_disk

    
    
  

