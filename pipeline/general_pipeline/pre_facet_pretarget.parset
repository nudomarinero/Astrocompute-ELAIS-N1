# Pre-Facet Calibration Pipeline
#
# Basic Pre-Facet Calibration Pipeline:
# - no demixing but A-team flagging,
# - only averaging target data after calibration transfer
# - consecutive subband-numbers in the data need to be consecutive subband-frequencies
# - the new "error_tolerance" option requires LOFAR software version >= 2.15
#   (Comment out all lines with "error_tolerance" if you want to use an older version.)
# - expects shared filesystem, that all nodes can reach all files!
#   (E.g. a single workstation or compute cluster with shared filesystem
#   doesn't work on multiple nodes on CEP-2 or CEP3.)

### First run this and check the generated plots! Modify and re-run if neccessary.
#pipeline.steps=[createmap_cal, ndppp_prep_cal, calib_cal, h5_imp_map, h5imp_cal, fitclock, ampl, plots, phase]
### When calibrator processing is done, you can do the processing of the target data.
### Either by using the same pipeline and running this:
# pipeline.steps=[ createmap_cal, ndppp_prep_cal, calib_cal, h5_imp_map, h5imp_cal, fitclock, ampl, plots, phase, createmap_target, ndppp_prep_target, trans, parmmap, calibtarget, dpppaverage, ateamtarget, ateamcliptar, sortmap_tar, dpppconcat, gsmcalibtarget, gsmcal_parmmap, plot_gsm_phases, make_results_mapfile, move_results, createmap_plots, copy_plots]
### Or by copying the *.npy files from the calibrator and running this:
pipeline.steps=[createmap_target, ndppp_prep_target, trans, parmmap, calibtarget, dpppaverage, ateamtarget, ateamcliptar, sortmap_tar, dpppconcat, gsmcalibtarget, gsmcal_parmmap, plot_gsm_phases, make_results_mapfile, move_results, createmap_plots, copy_plots]


# parameters you will need to adjust.
! avg_timestep         = 2   # averaging step needed to average the data to 4 seconds time resolution
! avg_freqstep         = 1   # averaging step needed to average the data to 4 ch/SB frequency resolution; 3 in our case
! target_input_path       = /mnt/scratch/data/raw
! target_input_pattern    = L*.MS.dppp
! target_skymodel      = /home/ubuntu/astrocompute/pipeline/data/models/mosaic.pybdsm.sky_in
! num_SBs_per_group    = 10 # make concatenated measurement-sets with that many subbands
! results_directory    = /mnt/scratch/data/process


# pathes to the scripts etc.
# #### ToDo: get the scripts onto CEP3 and adjust the pathes here!
! calib_cal_parset     = /home/ubuntu/prefactor/parsets/calibcal.parset
! cal_transfer_parset  = /home/ubuntu/prefactor/parsets/applyparmdb.parset
! ATeam_predict_parset = /home/ubuntu/prefactor/parsets/ateamclip.parset
! gsm_cal_parset       = /home/ubuntu/prefactor/parsets/gsmcal.parset
! ATeam_skymodel       = /home/ubuntu/prefactor/skymodels/Ateam_LBA_CC.skymodel
! losoto_importer      = /home/ubuntu/prefactor/bin/losotoImporter.py
! fitclock_script      = /home/ubuntu/prefactor/bin/fit_clocktec_initialguess_losoto.py
! fitamps_script       = /home/ubuntu/prefactor/bin/amplitudes_losoto_3.py
! plotsols_script      = /home/ubuntu/prefactor/bin/examine_npys.py
! fit_XYoffset_script  = /home/ubuntu/prefactor/bin/find_cal_global_phaseoffset_losoto.py
! transfer_script      = /home/ubuntu/prefactor/bin/transfer_amplitudes+clock+offset_toMS.py
! ATeam_Clipper        = /home/ubuntu/prefactor/bin/Ateamclipper.py
! plotphases_script    = /home/ubuntu/prefactor/bin/plot_solutions_all_stations.py
! flagging_strategy    = /opt/LofIm/share/rfistrategies/HBAdefault

# set this to True if you want the pipeline run to continue if single bands fail
! error_tolerance           =  False


# generate a mapfile of all the target data
createmap_target.control.kind            =   plugin
createmap_target.control.type            =   createMapfile
createmap_target.control.method          =   mapfile_from_folder
createmap_target.control.mapfile_dir     =   input.output.mapfile_dir
createmap_target.control.filename        =   createmap_target.mapfile
createmap_target.control.folder          =   {{ target_input_path }}
createmap_target.control.pattern         =   {{ target_input_pattern }}

# run NDPPP on the target data
ndppp_prep_target.control.type              = dppp
ndppp_prep_target.control.max_per_node      = 16                   # \ feel free to adjust these two values to match your system
ndppp_prep_target.control.environment       = {OMP_NUM_THREADS: 2} # / they should be reasonable for CEP3
ndppp_prep_target.control.error_tolerance   = {{ error_tolerance }}
ndppp_prep_target.argument.msin             = createmap_target.output.mapfile    # The input data.
ndppp_prep_target.argument.msin.datacolumn  = DATA
ndppp_prep_target.argument.msin.baseline    = CS*&; RS*&; CS*&RS*
ndppp_prep_target.argument.msout.datacolumn = DATA
ndppp_prep_target.argument.steps            = [flag,filter,flagamp]
ndppp_prep_target.argument.flag.type        = preflagger
ndppp_prep_target.argument.flag.baseline    = [ CS013HBA* ]            # feel free to change that, but CS013 is usually bad.
ndppp_prep_target.argument.filter.type      = filter
ndppp_prep_target.argument.filter.baseline  = CS*, RS*&&
ndppp_prep_target.argument.filter.remove    = true                     # fully kick out the international stations.
ndppp_prep_target.argument.flagamp.type     = preflagger
ndppp_prep_target.argument.flagamp.amplmin  = 1e-30

# generate parmDB with the interpolated calibrator data to apply to the traget
trans.control.type            = pythonplugin
trans.control.executable      = {{ transfer_script }}
trans.control.max_per_node    =  15                                 # feel free to adjust this value to match your system
trans.control.error_tolerance = {{ error_tolerance }}
# order for flags is: [<input-filenames>,<output-filename-base>,<extension_for_new_parmDBs>]
trans.argument.flags          = [ndppp_prep_target.output.mapfile,caldata_transfer,/instrument_amp_clock_offset]

# generate mapfile with the parmDBs to be applied to the target data
parmmap.control.kind               =  plugin
parmmap.control.type               =  createMapfile
parmmap.control.method             =  add_suffix_to_file
parmmap.control.mapfile_in         =  ndppp_prep_target.output.mapfile
parmmap.control.add_suffix_to_file =  /instrument_amp_clock_offset
parmmap.control.mapfile_dir        =  input.output.mapfile_dir
parmmap.control.filename           =  targetparmdb.mapfile

# run BBS to apply the calibrator values to the target data
calibtarget.control.type             =  python-calibrate-stand-alone  
calibtarget.control.max_per_node     =  15                                 # feel free to adjust this value to match your system  
calibtarget.control.error_tolerance  = {{ error_tolerance }}
calibtarget.argument.observation     =  ndppp_prep_target.output.mapfile   # mapfile for the NDPPP-ed target data
calibtarget.argument.parset          =  {{ cal_transfer_parset }}
calibtarget.argument.parmdb          =  parmmap.output.mapfile
calibtarget.argument.replace-parmdb  =  True

# run NDPPP again to flag and average some more.
dpppaverage.control.type                 = dppp
dpppaverage.control.max_per_node         = 8                   # \ feel free to adjust these two values to match your system
dpppaverage.control.environment          = {OMP_NUM_THREADS: 2} # / they should be reasonable for CEP3
dpppaverage.control.error_tolerance      = {{ error_tolerance }}
dpppaverage.argument.msin                = ndppp_prep_target.output.mapfile  # The input data.
dpppaverage.argument.msin.datacolumn     = CORRECTED_DATA
dpppaverage.argument.msout.datacolumn    = DATA
dpppaverage.argument.msout.writefullresflag = false
dpppaverage.argument.steps               = [count,flag,count,avg]
dpppaverage.argument.flag.type           = aoflagger
dpppaverage.argument.flag.keepstatistics = false
dpppaverage.argument.flag.memoryperc     = 10
dpppaverage.argument.flag.strategy       = {{ flagging_strategy }}
dpppaverage.argument.avg.type            = average
dpppaverage.argument.avg.timestep        = {{ avg_timestep }}       # average to 8 second intervals , PLEASE ADJUST!
dpppaverage.argument.avg.freqstep        = {{ avg_freqstep }}       # average to 2 ch/SB , PLEASE ADJUST!

# run BBS to predict the A-Team contribution
ateamtarget.control.type             =  python-calibrate-stand-alone  
ateamtarget.control.max_per_node     =  15                          # feel free to adjust this value to match your system  
ateamtarget.control.error_tolerance  =  {{ error_tolerance }}
ateamtarget.argument.force           =  True 
ateamtarget.argument.observation     =  dpppaverage.output.mapfile
ateamtarget.argument.parset          =  {{ ATeam_predict_parset }}  
ateamtarget.argument.catalog         =  {{ ATeam_skymodel }}     

# run the a-team clipper to flag data affected by the a-team
ateamcliptar.control.kind               =  recipe
ateamcliptar.control.type               =  executable_args
ateamcliptar.control.max_per_node       =  15
ateamcliptar.control.mapfile_in         =  dpppaverage.output.mapfile
ateamcliptar.control.executable         =  {{ ATeam_Clipper }}
ateamcliptar.control.error_tolerance    =  {{ error_tolerance }}
ateamcliptar.control.arguments          =  [allms]
ateamcliptar.control.inputkey           =  allms

# sort the target data into groups so that NDPPP can concatenate them
sortmap_tar.control.kind            =   plugin
sortmap_tar.control.type            =   groupMapfileObsSB
sortmap_tar.control.mapfile_dir     =   input.output.mapfile_dir
sortmap_tar.control.filename        =   sortmap_tar.mapfile
sortmap_tar.control.mapfile_in      =   dpppaverage.output.mapfile
sortmap_tar.control.numSB           =   {{ num_SBs_per_group }}
sortmap_tar.control.NDPPPfill       =   True
sortmap_tar.control.startFromZero   =   True   # This means that groups (and group-names) are done with SB000 as a reference
sortmap_tar.control.truncateLastSBs =   True   # This means that a excess subbands that don't make a full group get discarded

# run NDPPP to concatenate the target
dpppconcat.control.type                 =  dppp
dpppconcat.control.max_per_node         =  15
dpppconcat.control.error_tolerance      =  {{ error_tolerance }}
dpppconcat.control.mapfile_out          =  sortmap_tar.output.groupmap # tell the pipeline to give the output useful names
dpppconcat.control.mapfiles_in          =  [sortmap_tar.output.mapfile]
dpppconcat.control.inputkey             =  msin
dpppconcat.argument.msin.datacolumn     =  DATA
dpppconcat.argument.msin.missingdata    =  True    #\ these two lines will make NDPPP generate dummy data when
dpppconcat.argument.msin.orderms        =  False   #/ concatenating data
dpppconcat.argument.msout.datacolumn    =  DATA
dpppconcat.argument.steps               =  [flag]      # run the aoflagger (this used to be an extra step)
dpppconcat.argument.flag.type           =  aoflagger
dpppconcat.argument.flag.keepstatistics =  false
dpppconcat.argument.flag.memoryperc     =  10
dpppconcat.argument.flag.strategy       =  {{ flagging_strategy }}

# phase calibration on the gsm skymodel
gsmcalibtarget.control.type                            =  python-calibrate-stand-alone  
gsmcalibtarget.control.max_per_node                    =  4  # feel free to adjust this to match your system  
gsmcalibtarget.control.error_tolerance                 =  {{ error_tolerance }}
gsmcalibtarget.argument.force                          =  True 
gsmcalibtarget.argument.observation                    =  dpppconcat.output.mapfile
gsmcalibtarget.argument.parmdb-name                    =  instrument_directionindependent
gsmcalibtarget.argument.parset                         =  {{ gsm_cal_parset }}  
gsmcalibtarget.argument.catalog                        =  {{ target_skymodel }}     
gsmcalibtarget.argument.Step.solve.Solve.CellSize.Freq =  0  # default: solution-cell spans all frequency channels
gsmcalibtarget.argument.Step.solve.Solve.CellSize.Time =  1  # default: one solution per time-step

# generate mapfile with the parmDBs that were created by BBS in the gsmcalibtarget step
gsmcal_parmmap.control.kind               =  plugin
gsmcal_parmmap.control.type               =  createMapfile
gsmcal_parmmap.control.method             =  add_suffix_to_file
gsmcal_parmmap.control.mapfile_in         =  dpppconcat.output.mapfile
gsmcal_parmmap.control.add_suffix_to_file =  /instrument_directionindependent
gsmcal_parmmap.control.mapfile_dir        =  input.output.mapfile_dir
gsmcal_parmmap.control.filename           =  gsmcal_parmdbs.mapfile # TODO: CHECK

# plot the phase solutions from the phase-only calibration of the target
plot_gsm_phases.control.kind               =  recipe
plot_gsm_phases.control.type               =  executable_args
plot_gsm_phases.control.executable         =  {{ plotphases_script }}
plot_gsm_phases.control.max_per_node       =  15
plot_gsm_phases.control.mapfiles_in        =  [gsmcal_parmmap.output.mapfile,dpppconcat.output.mapfile]
plot_gsm_phases.control.inputkeys          =  [infile,outbase]
plot_gsm_phases.control.arguments          =  [-p,infile,outbase]

# make mapfile with the filenames of the results that we want
make_results_mapfile.control.kind            =  plugin
make_results_mapfile.control.type            =  makeResultsMapfile
make_results_mapfile.control.mapfile_dir     =  input.output.mapfile_dir
make_results_mapfile.control.filename        =  make_results_mapfile.mapfile
make_results_mapfile.control.mapfile_in      =  dpppconcat.output.mapfile
make_results_mapfile.control.target_dir      =  {{ results_directory }}
make_results_mapfile.control.make_target_dir =  True
make_results_mapfile.control.new_suffix      =  .pre-cal.ms

# move the results to where we want them
move_results.control.kind               =  recipe
move_results.control.type               =  executable_args
move_results.control.executable         =  /bin/mv
move_results.control.max_per_node       =  15                                 # feel free to adjust this value to match your system
move_results.control.mapfiles_in        =  [dpppconcat.output.mapfile, make_results_mapfile.output.mapfile]
move_results.control.inputkeys          =  [source,destination]
move_results.control.arguments          =  [source,destination]

# generate a mapfile of all the diagnostic plots
createmap_plots.control.kind            =   plugin
createmap_plots.control.type            =   createMapfile
createmap_plots.control.method          =   mapfile_from_folder
createmap_plots.control.mapfile_dir     =   input.output.mapfile_dir
createmap_plots.control.filename        =   diagnostic_plots.mapfile  # TODO: CHECK
createmap_plots.control.folder          =   input.output.working_directory/input.output.job_name
createmap_plots.control.pattern         =   *.png

# copy the diagnostic plots to the results_directory
copy_plots.control.kind               =  recipe
copy_plots.control.type               =  executable_args
copy_plots.control.executable         =  /bin/cp
copy_plots.control.max_per_node       =  15                                 # feel free to adjust this value to match your system
copy_plots.control.mapfile_in         =  createmap_plots.output.mapfile
copy_plots.control.inputkey           =  source
copy_plots.control.arguments          =  [source,{{ results_directory }}]
