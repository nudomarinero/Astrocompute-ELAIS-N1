# Pre-Facet Calibration Pipeline for raw data
#
# Pre-Facet Calibration Pipeline: 
# - first NDPPP run tailored to processing raw data
# - figures out frequencies from SPECTRAL_WINDOW table in MSs
# - expects shared filesystem, that all nodes can reach all files!
#   (E.g. a single workstation or compute cluster with shared filesystem
#   doesn't work on multiple nodes on CEP-2 or CEP3.)

### First run this and check the generated plots! Modify and re-run if neccessary.
pipeline.steps=[createmap_cal, ndppp_prep_cal, predict4_cal, ateamclip_cal, calib_cal, h5_imp_map, h5imp_cal, fitclock, ampl, plots, phase]

# parameters you will need to adjust.
! avg_timestep_pre     = 2   # averaging in 1st NDPPP run  \  these two together should average
! avg_timestep_2nd     = 2   # averaging in 2nd NDPPP run  /  the data to 4 seconds time resolution
! avg_freqstep_pre     = 4   # averaging in 1st NDPPP run  \  these two together should average
! avg_freqstep_2nd     = 2   # averaging in 2nd NDPPP run  /  the data to 4 ch/SB frequency resolution
! num_ch_per_SB        = 64  # how many channels are there in one SB (A bit redundant, but I cannot do math here!)
! cal_input_path       = /mnt/scratch/data/raw
! cal_input_pattern    = L*MS
#! calibrator_skymodel  = /home/ubuntu/prefactor/skymodels/3c295-twocomp.skymodel
! calibrator_skymodel  = /home/ubuntu/prefactor/skymodels/3C380_MSSS.skymodel

# pathes to the scripts etc.
# #### ToDo: get the scripts onto CEP3 and adjust the pathes here!
! calib_cal_parset     = /home/ubuntu/prefactor/parsets/calibcal.parset
! Ateamclipper_script  = /home/ubuntu/prefactor/bin/Ateamclipper.py
! predict4_cal         = /home/ubuntu/prefactor/parsets/ateamclip.parset
! predict4_skymodel    = /home/ubuntu/prefactor/skymodels/Ateam_LBA_CC.skymodel
! cal_transfer_parset  = /home/ubuntu/prefactor/parsets/applyparmdb.parset
! demixing_sourceDB    = /home/ubuntu/prefactor/skymodels/Ateamhighresdemix.sourcedb
! gsm_cal_parset       = /home/ubuntu/prefactor/parsets/gsmcal.parset
! losoto_importer      = /home/ubuntu/prefactor/bin/losotoImporter.py
! dumb_smart_script    = /home/ubuntu/prefactor/bin/gen_demixing_sources.py
! fitclock_script      = /home/ubuntu/prefactor/bin/fit_clocktec_initialguess_losoto.py
! fitamps_script       = /home/ubuntu/prefactor/bin/amplitudes_losoto_3.py
! plotsols_script      = /home/ubuntu/prefactor/bin/examine_npys.py
! fit_XYoffset_script  = /home/ubuntu/prefactor/bin/find_cal_global_phaseoffset_losoto.py
! transfer_script      = /home/ubuntu/prefactor/bin/transfer_amplitudes+clock+offset_toMS.py
! sortmap_script       = /home/ubuntu/prefactor/bin/sort_times_into_freqGroups.py
! plotphases_script    = /home/ubuntu/prefactor/bin/plot_solutions_all_stations.py


# set this to True if you want the pipeline run to continue if single bands fail
! error_tolerance           =  False

# generate a mapfile of all the calibrator data
createmap_cal.control.kind            =   plugin
createmap_cal.control.type            =   createMapfile
createmap_cal.control.method          =   mapfile_from_folder
createmap_cal.control.mapfile_dir     =   input.output.mapfile_dir
createmap_cal.control.filename        =   createmap_cal.mapfile
createmap_cal.control.folder          =   {{ cal_input_path }}
createmap_cal.control.pattern         =   {{ cal_input_pattern }}

# I want to run demixing, for that I need a MS with names for the instrument tables
demix-parmdbs_cal.control.kind               =  plugin
demix-parmdbs_cal.control.type               =  createMapfile
demix-parmdbs_cal.control.method             =  add_suffix_to_file
demix-parmdbs_cal.control.mapfile_in         =  createmap_cal.output.mapfile
demix-parmdbs_cal.control.add_suffix_to_file =  -demix-inst
demix-parmdbs_cal.control.mapfile_dir        =  input.output.mapfile_dir  
demix-parmdbs_cal.control.filename           =  demix-parmdbs_cal.mapfile

# Get the sources to be demixed for each epoch
dumb_smart_demixing_cal.control.type            =  pythonplugin
dumb_smart_demixing_cal.control.executable      =  {{ dumb_smart_script }}
dumb_smart_demixing_cal.control.error_tolerance =  {{ error_tolerance }}
dumb_smart_demixing_cal.argument.flags          =  createmap_cal.output.mapfile
dumb_smart_demixing_cal.argument.sourcelist     =  "CasA CygA VirA TauA"
dumb_smart_demixing_cal.argument.elevlimit      =  0deg

# run NDPPP on the calibrator data
# My data is raw, non pre-processed data, so the parset looks different!
ndppp_prep_cal.control.type                    = dppp
ndppp_prep_cal.control.max_per_node            = 8                   
ndppp_prep_cal.control.environment             = {OMP_NUM_THREADS: 2}  
ndppp_prep_cal.control.error_tolerance         = {{ error_tolerance }}
ndppp_prep_cal.control.mapfiles_in             = [createmap_cal.output.mapfile]
ndppp_prep_cal.control.inputkeys               = [msin]
#ndppp_prep_cal.argument.msin                  = # see ndppp_prep_cal.control.inputkeys
ndppp_prep_cal.argument.msin.datacolumn        = DATA
ndppp_prep_cal.argument.msin.missingdata       = True   #\ these two lines will make NDPPP generate dummy data when 
ndppp_prep_cal.argument.msin.orderms           = False  #/ concatenating data
ndppp_prep_cal.argument.msin.baseline          = CS*&; RS*&; CS*&RS*
ndppp_prep_cal.argument.msout.datacolumn       = DATA
ndppp_prep_cal.argument.msin.autoweight        = True   # recomended for processing raw input data 
ndppp_prep_cal.argument.steps                  = [autoflag,flagedge,flag,filter,aoflag,demix,avg,flagamp]
ndppp_prep_cal.argument.autoflag.type          = preflagger
ndppp_prep_cal.argument.autoflag.corrtype      = auto
ndppp_prep_cal.argument.flagedge.type          = preflagger
ndppp_prep_cal.argument.flagedge.chan          = [0..nchan/32-1, 31*nchan/32..nchan]
ndppp_prep_cal.argument.flag.type              = preflagger
#ndppp_prep_cal.argument.flag.baseline          = [ DE* , FR* ,  UK* , SE* , CS013HBA*]
ndppp_prep_cal.argument.flag.baseline          = [ DE* , FR* ,  UK* ,  CS013HBA*]
ndppp_prep_cal.argument.filter.type            = filter
ndppp_prep_cal.argument.filter.baseline        = CS*, RS*&&  
ndppp_prep_cal.argument.filter.remove          = true
ndppp_prep_cal.argument.aoflag.type            = aoflagger
ndppp_prep_cal.argument.aoflag.memoryperc      = 10
ndppp_prep_cal.argument.aoflag.keepstatistics  = false
ndppp_prep_cal.argument.avg.type               = average
ndppp_prep_cal.argument.avg.timestep           = {{ avg_timestep_pre }}         # first averaging step 
ndppp_prep_cal.argument.avg.freqstep           = {{ avg_freqstep_2nd }}         # second averaging step in frequency
ndppp_prep_cal.argument.flagamp.type           = preflagger
ndppp_prep_cal.argument.flagamp.amplmin        = 1e-30

#Predict
predict4_cal.control.type                                   =  python-calibrate-stand-alone  
predict4_cal.control.max_per_node                           =  8
predict4_cal.control.error_tolerance                        =  {{ error_tolerance }}
predict4_cal.argument.observation                           =  ndppp_prep_cal.output.mapfile
predict4_cal.argument.force                                 =  True 
predict4_cal.argument.parset                                =  {{ predict4_parset }}  
predict4_cal.argument.catalog                               =  {{ predict4_skymodel }}     

# run the A-team clipper to flag data affected by the a-team
ateamclip_cal.control.kind               =  recipe
ateamclip_cal.control.type               =  executable_args
ateamclip_cal.control.max_per_node       =  15
ateamclip_cal.control.mapfile_in         =  ndppp_prep_cal.output.mapfile
ateamclip_cal.control.executable         =  {{ Ateamclipper_script }}
ateamclip_cal.control.error_tolerance    =  {{ error_tolerance }}
ateamclip_cal.control.arguments          =  [allms]
ateamclip_cal.control.inputkey           =  allms

#now run BBS on the NDPPP-ed calibrator data.
calib_cal.control.type                                   =  python-calibrate-stand-alone  
calib_cal.control.max_per_node                           =  8
calib_cal.control.error_tolerance                        =  {{ error_tolerance }}
calib_cal.argument.force                                 =  True 
calib_cal.argument.observation                           =  ndppp_prep_cal.output.mapfile
calib_cal.argument.parset                                =  {{ calib_cal_parset }}  
calib_cal.argument.catalog                               =  {{ calibrator_skymodel }}     
calib_cal.argument.Step.solve.Model.Beam.UseChannelFreq  = T       # needed becase I use data that has already been concatenated

# generate a mapfile with all files in a single entry
h5_imp_map.control.kind               =  plugin
h5_imp_map.control.type               =  createMapfile
h5_imp_map.control.method             =  mapfile_all_to_one
h5_imp_map.control.mapfile_in         =  ndppp_prep_cal.output.mapfile
h5_imp_map.control.mapfile_dir        =  input.output.mapfile_dir  
h5_imp_map.control.filename           =  h5_imp_map.mapfile

# import all instrument tables into one LoSoTo file 
h5imp_cal.control.type            =  pythonplugin                
h5imp_cal.control.executable      =  {{ losoto_importer }}
h5imp_cal.argument.flags          =  [h5_imp_map.output.mapfile,h5imp_cal_losoto.h5] 
h5imp_cal.argument.instrument     =  /instrument
h5imp_cal.argument.solsetName     =  sol000                        
h5imp_cal.argument.compression    =  7

# now run the script that does the clock-TEC fitting
fitclock.control.kind             = recipe
fitclock.control.type             = executable_args
fitclock.control.mapfile_in       = h5imp_cal.output.h5parm.mapfile
fitclock.control.executable       = {{ fitclock_script }}
# order for arguments is: [<input-filename>,<output-filename-base>,<NumThreads>]
fitclock.control.arguments        = [h5gvds,caldata_transfer,24] 
fitclock.control.inputkey         = h5gvds

# now run the script that filters the amplitudes
ampl.control.kind             = recipe
ampl.control.type             = executable_args
ampl.control.mapfile_in       = h5imp_cal.output.h5parm.mapfile
ampl.control.executable       = {{ fitamps_script }}
# order for arguments is: [<input-filename>,<output-filename-base>,<num-ch/SB>,<subbans-to-flag>]
# subbans-to-flag = semicolon-sperated list of integers in double-quotes 
# e.g.: ampl.control.arguments   = [h5gvds,caldata_transfer,4,"205;206;207"] 
ampl.control.arguments        = [h5gvds,caldata_transfer,4,""] 
ampl.control.inputkey         = h5gvds

# and generate some output plots
plots.control.kind             = recipe
plots.control.type             = executable_args
plots.control.mapfile_in       = h5imp_cal.output.h5parm.mapfile
plots.control.executable       = {{ plotsols_script }}
plots.control.skip_infile      = True
plots.control.arguments        = [caldata_transfer]   # Needs "<output-filename-base>" from the fitclock and ampl steps

# fit the phase difference between X and Y 
phase.control.type            = pythonplugin
phase.control.executable      = {{ fit_XYoffset_script }}
# order for flags is: [<input-filename>,<output-filename-base>]
phase.argument.flags          = [h5imp_cal.output.h5parm.mapfile,caldata_transfer]
